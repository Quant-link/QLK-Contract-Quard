version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: web/backend/Dockerfile
    container_name: contractquard-backend
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app/src:/app
      - ENVIRONMENT=production
    volumes:
      - ./src:/app/src:ro
      - ./web/backend:/app/web/backend:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - contractquard-network

  # Frontend Service
  frontend:
    build:
      context: web/frontend
      dockerfile: Dockerfile
    container_name: contractquard-frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - contractquard-network

  # Redis for caching (optional, for future use)
  redis:
    image: redis:7-alpine
    container_name: contractquard-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - contractquard-network

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: contractquard-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - contractquard-network
    profiles:
      - production

volumes:
  redis-data:
    driver: local

networks:
  contractquard-network:
    driver: bridge
